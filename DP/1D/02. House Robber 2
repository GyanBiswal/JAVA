import java.util.Arrays;

public class Solution {
    public int rob(int[] nums) {
        int n = nums.length;
        if (n == 0) return 0;
        if (n == 1) return nums[0];

        // Case 1: Rob houses from 0 to n-2
        int[] dp1 = new int[n];
        Arrays.fill(dp1, -1);
        int max1 = robHelper(nums, 0, n - 2, dp1);

        // Case 2: Rob houses from 1 to n-1
        int[] dp2 = new int[n];
        Arrays.fill(dp2, -1);
        int max2 = robHelper(nums, 1, n - 1, dp2);

        return Math.max(max1, max2);
    }

    private int robHelper(int[] nums, int idx, int n, int[] dp) {
        if (idx > n) return 0;
        if (dp[idx] != -1) return dp[idx];

        int rob = nums[idx] + robHelper(nums, idx + 2, n, dp);
        int skip = robHelper(nums, idx + 1, n, dp);

        return dp[idx] = Math.max(rob, skip);
    }
}
