class Solution {
    public int rob(int[] nums) {
        int[] dp = new int[nums.length];
        Arrays.fill(dp, -1);
        return helperDp(nums, 0, dp);
    }
    public int helperDp(int[] nums, int idx, int[] dp){
        if(idx >= nums.length) return 0;
        if(dp[idx] != -1) return dp[idx];

        int notTake = helperDp(nums, idx + 1, dp);
        int take = nums[idx] + helperDp(nums, idx + 2, dp);

        return dp[idx] = Math.max(take, notTake);
    }
}


// class Solution {
//     public int rob(int[] nums) {
//         int n = nums.length;
// 		if(n == 0) return 0;
// 		if(n == 1) return nums[0];

// 		int[] dp = new int[n + 1];
// 		dp[0] = 0; // no elements -> sum = 0
// 		dp[1] = nums[0]; // first element

// 		for(int i = 2; i <= n; i++){
// 			dp[i] = Math.max(dp[i - 1], dp[i - 2] + nums[i - 1]);
// 		}
// 		return dp[n];
//     }
// }
