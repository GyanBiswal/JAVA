class Solution {
    public int cherryPickup(int[][] grid) {
        int n = grid.length;
        Integer[][][] dp = new Integer[n][n][n]; 
        return Math.max(0, helperDp(grid, 0, 0, 0, dp));
    }

    public int helperDp(int[][] grid, int r1, int c1, int r2, Integer[][][] dp) {
        int n = grid.length;
        int c2 = r1 + c1 - r2;

        // Out of bounds or thorn cell
        if (r1 >= n || c1 >= n || r2 >= n || c2 >= n || grid[r1][c1] == -1 || grid[r2][c2] == -1)
            return Integer.MIN_VALUE;

        // Destination
        if (r1 == n - 1 && c1 == n - 1)
            return grid[r1][c1];

        // Check memo
        if (dp[r1][c1][r2] != null) return dp[r1][c1][r2];

        int cherries = grid[r1][c1];
        if (r1 != r2 || c1 != c2) cherries += grid[r2][c2]; // avoid double counting

        int maxCherries = Integer.MIN_VALUE;

        maxCherries = Math.max(maxCherries, helperDp(grid, r1 + 1, c1, r2 + 1, dp)); // both down
        maxCherries = Math.max(maxCherries, helperDp(grid, r1, c1 + 1, r2, dp));     // both right
        maxCherries = Math.max(maxCherries, helperDp(grid, r1 + 1, c1, r2, dp));     // r1 down, r2 right
        maxCherries = Math.max(maxCherries, helperDp(grid, r1, c1 + 1, r2 + 1, dp)); // r1 right, r2 down

        if (maxCherries == Integer.MIN_VALUE) {
            dp[r1][c1][r2] = Integer.MIN_VALUE;
            return Integer.MIN_VALUE;
        }

        return dp[r1][c1][r2] = cherries + maxCherries;
    }
}




// class Solution {
//     public int cherryPickup(int[][] grid) {
//         return Math.max(0, helperRec(grid, 0, 0, 0));
//     }
//     public int helperRec(int[][] grid, int r1, int c1, int r2){
//         int n = grid.length;
//         int c2 = r1 + c1 - r2;

//         // out of bounds or thorn cell
//         if(r1 >= n || r2 >= n || c1 >= n || c2 >= n || grid[r1][c1] == -1 || grid[r2][c2] == -1) return Integer.MIN_VALUE;

//         if(r1 == n - 1 && c1 == n - 1) return grid[r1][c1];

//         int cherries = grid[r1][c1];
//         if(r1 != r2 || c1 != c2) cherries += grid[r2][c2]; // avoid double count;

//         int maxCherries = Integer.MIN_VALUE;

//         maxCherries = Math.max(maxCherries, helperRec(grid, r1 + 1, c1, r2 + 1)); // both go down
//         maxCherries = Math.max(maxCherries, helperRec(grid, r1, c1 + 1, r2));     // both go right
//         maxCherries = Math.max(maxCherries, helperRec(grid, r1 + 1, c1, r2));     // r1 down, r2 right
//         maxCherries = Math.max(maxCherries, helperRec(grid, r1, c1 + 1, r2 + 1)); // r1 right, r2 down

//         if (maxCherries == Integer.MIN_VALUE) return Integer.MIN_VALUE;

//         return cherries + maxCherries;
//     }
// }
