class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        int[][] dp = new int[m][n];

        for(int i = m - 1; i >= 0; i--){
            for(int j = n - 1; j >= 0; j--){
                if(obstacleGrid[i][j] == 1){
                    dp[i][j] = 0; // obstacle
                }
                else if(i == m - 1 && j == n - 1){
                    dp[i][j] = 1; // destination
                }
                else{
                    int down = (i + 1 < m) ? dp[i + 1][j] : 0;
                    int right = (j + 1 < n) ? dp[i][j + 1] : 0;
                    dp[i][j] = down + right;
                }
            }
        }
        return dp[0][0];
    }
}






// class Solution {
//     public int uniquePathsWithObstacles(int[][] obstacleGrid) {
//         int m = obstacleGrid.length;
//         int n = obstacleGrid[0].length;
//         int[][] dp = new int[m][n];
//         for(int[] row : dp) Arrays.fill(row, -1);
//         return helperDp(0, 0, obstacleGrid, dp);
//     }
//     private int helperDp(int i, int j, int[][] obstacleGrid, int[][] dp) {
//         int m = obstacleGrid.length;
//         int n = obstacleGrid[0].length;

//         if (i >= m || j >= n) return 0; // out of bounds
//         if (obstacleGrid[i][j] == 1) return 0; // obstacle
//         if (i == m - 1 && j == n - 1) return 1; // start point

//         if(dp[i][j] != -1) return dp[i][j];

//         int right = helperDp(i + 1, j, obstacleGrid, dp);
//         int down = helperDp(i, j + 1, obstacleGrid, dp);

//         return dp[i][j] = right + down;
//     }
// }





// class Solution {
//     public int uniquePathsWithObstacles(int[][] obstacleGrid) {
//         return helper(0, 0 obstacleGrid);
//     }
//     private int helper(int i, int j, int[][] obstacleGrid) {
        // int m = obstacleGrid.length;
//         int n = obstacleGrid[0].length;
//         if (i >= m || j >= n) return 0; // out of bounds
        // if (obstacleGrid[i][j] == 1) return 0; // obstacle
        // if (i == m - 1 && j == n - 1) return 1; // start point

//         int right = helper(i - 1, j, obstacleGrid);
//         int down = helper(i, j - 1, obstacleGrid);
//         return right + down;
//     }
// }
