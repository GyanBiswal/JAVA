class Solution {
    public int uniquePaths(int m, int n) {
        int[][] dp = new int[m][n];

        //The bottom-right cell (m-1, n-1) = 1 â†’ only one way (standing still).
        //Any cell in the last row or last column also has only one path (only right or only down).
        
        for(int i = 0; i < m; i++) dp[i][n - 1] = 1;
        for(int j = 0; j < n; j++) dp[m - 1][j] = 1;

        for(int i = m - 2; i >= 0; i--){
            for(int j = n - 2; j >= 0; j--){
                dp[i][j] = dp[i + 1][j] + dp[i][j + 1];
            }
        }
        return dp[0][0];
    }
}







// class Solution {
//     public int uniquePaths(int m, int n) {
//         int[][] dp = new int[m][n];
//         for(int[] row : dp) Arrays.fill(row, -1);
//         return uniquePathsDp(0, 0, m, n, dp);
//     }
//     public int uniquePathsDp(int i, int j, int m, int n, int[][] dp){
//         if(i >= m || j >= n) return 0;
//         if(i == m - 1 && j == n - 1) return 1;
//         if(dp[i][j] != -1) return dp[i][j];
//         int right = uniquePathsDp(i, j + 1, m, n, dp);
//         int down = uniquePathsDp(i + 1, j, m, n, dp);
//         return dp[i][j] = right + down;
//     }
// }








// class Solution {
//     public int uniquePaths(int m, int n) {
//         return uniquePathsRec(0, 0, m, n);
//     }
//     public int uniquePathsRec(int i, int j, int m, int n){
//         if(i >= m || j >= n) return 0;
//         if(i == m - 1 && j == n - 1) return 1;
//         int right = uniquePathsRec(i, j + 1, m, n);
//         int dwon = uniquePathsRec(i + 1, j, m, n);
//         return right + left;
//     }
// }
