class Solution {
    public int minPathSum(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        int[][] dp = new int[m][n];
        for(int[] row : dp) Arrays.fill(row, -1);
        return helper(grid, 0, 0, dp);
    }
    public int helper(int[][] grid, int i, int j, int[][] dp){
        int m = grid.length;
        int n = grid[0].length;
        if(i >= m || j >= n) return Integer.MAX_VALUE;
        if(i == m - 1 && j == n - 1) return grid[i][j];
        if(dp[i][j] != -1) return dp[i][j];

        int right = helper(grid, i, j + 1, dp);
        int down = helper(grid, i + 1, j, dp);
        
        return dp[i][j] = grid[i][j] + Math.min(right, down);
    }
}




// class Solution {
//     public int minPathSum(int[][] grid) {
//         int row = grid.length;
//         int col = grid[0].length;
//         int[][] dp = new int[row][col];
//         for(int[] arr : dp){
//             Arrays.fill(arr, -1);
//         }
//         return helperDp(grid, 0, 0, dp);
//     }
//     public int helperDp(int[][] grid, int i, int j, int[][] dp){
//         int row = grid.length;
//         int col = grid[0].length;
//         if(i == row - 1 && j == col - 1) return grid[i][j];
//         if(i >= row || j >= col) return Integer.MAX_VALUE;

//         if(dp[i][j] != -1) return dp[i][j];

//         int down = helperDp(grid, i + 1, j, dp);
//         int right = helperDp(grid, i, j + 1, dp);

//         return dp[i][j] = grid[i][j] + Math.min(down, right);
//     }
// }



// class Solution {
//     public int minPathSum(int[][] grid) {
//         return helperRec(grid, 0, 0);
//     }
//     public int helperRec(int[][] grid, int i, int j){
//         int row = grid.length;
//         int col = grid[0].length;
//         if(i == row - 1 && j == col - 1) return grid[i][j];
//         if(i >= row || j >= col) return Integer.MAX_VALUE;

//         int down = helperRec(grid, i + 1, j);
//         int right = helperRec(grid, i, j + 1);

//         return grid[i][j] + Math.min(down, right);
//     }
// }
