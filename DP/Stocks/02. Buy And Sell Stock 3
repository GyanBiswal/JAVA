class Solution {
    public int maxProfit(int[] prices) {
        int n = prices.length;
        int[][][] dp = new int[n + 1][2][3];
        
        for(int idx = n - 1; idx >= 0; idx--){
            for(int buyAllowed = 0; buyAllowed <= 1; buyAllowed++){
                for(int lim = 1; lim <= 2; lim++){
                    if(buyAllowed == 1){
                        int buy = -prices[idx] + dp[idx + 1][0][lim];
                        int skip = 0 + dp[idx + 1][1][lim];
                        dp[idx][buyAllowed][lim] = Math.max(buy, skip);
                    }
                    else{
                        int sell = prices[idx] + dp[idx + 1][1][lim - 1];
                        int skip = 0 + dp[idx + 1][0][lim];
                        dp[idx][buyAllowed][lim] = Math.max(sell, skip);
                    }
                }
            }
        }
        return dp[0][1][2];
    }
}




// class Solution {
//     public int maxProfit(int[] prices) {
//         int n = prices.length;
//         int[][][] dp = new int[n][2][3];
//         for (int i = 0; i < n; i++) {
//             for (int j = 0; j < 2; j++) {
//                 Arrays.fill(dp[i][j], -1);
//             }
//         }
//         return helperDp(prices, 0, 1, 2, dp);
//     }

//     public int helperDp(int[] prices, int idx, int buyAllowed, int limit, int[][][] dp){
//         if(idx == prices.length) return 0;
//         if(limit == 0) return 0;
//         if(dp[idx][buyAllowed][limit] != -1) return dp[idx][buyAllowed][limit];

//         if(buyAllowed == 1){
//             int buy = -prices[idx] + helperDp(prices, idx + 1, 0, limit, dp);
//             int skip = 0 + helperDp(prices, idx + 1, 1, limit, dp);
//             return dp[idx][buyAllowed][limit] = Math.max(buy, skip);
//         }
//         else{
//             int sell = prices[idx] + helperDp(prices, idx + 1, 1, limit - 1, dp);
//             int skip = 0 + helperDp(prices, idx + 1, 0, limit, dp);
//             return dp[idx][buyAllowed][limit] = Math.max(sell, skip);
//         }
//     }
// }


// class Solution {
//     public int maxProfit(int[] prices) {
//         return helperRec(prices, 0, 1, 2);
//     }

//     public int helperRec(int[] prices, int idx, int buyAllowed, int limit){
//         if(idx == prices.length) return 0;
//         if(limit == 0) return 0;

//         if(buyAllowed == 1){
//             int buy = -prices[idx] + helperRec(prices, idx + 1, 0, limit);
//             int skip = 0 + helperRec(prices, idx + 1, 1, limit);
//             return Math.max(buy, skip);
//         }
//         else{
//             int sell = prices[idx] + helperRec(prices, idx + 1, 1, limit - 1);
//             int skip = 0 + helperRec(prices, idx + 1, 0, limit);
//             return Math.max(sell, skip);
//         }
//     }
// }
