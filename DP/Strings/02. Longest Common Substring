// User function Template for Java



class Solution {
    public int longestCommonSubstr(String s1, String s2) {
        int m = s1.length(), n = s2.length();
        int[][] dp = new int[m+1][n+1];
        int maxLength = 0;
        for(int i = m - 1; i >= 0; i--){
            for(int j = n - 1; j >= 0; j--){
                if(s1.charAt(i) == s2.charAt(j)){
                    dp[i][j] = 1 + dp[i + 1][j + 1];
                    maxLength = Math.max(maxLength, dp[i][j]);
                }
                else dp[i][j] = 0;
            }
        }
        return maxLength;
    }

}



// class Solution {
//     public int longestCommonSubstr(String s1, String s2) {
//         int m = s1.length(), n = s2.length();
//         int[][] dp = new int[m][n];
//         for(int[] arr : dp) Arrays.fill(arr, -1);
//         int maxLength = 0;
//         for(int i = 0; i < m; i++){
//             for(int j = 0; j < n; j++){
//                 maxLength = Math.max(maxLength, helperDp(s1, s2, i, j, dp));
//             }
//         }
//         return maxLength;
//     }
//     public int helperDp(String s1, String s2, int idx1, int idx2, int[][] dp){
//         if(idx1 == s1.length() || idx2 == s2.length()) return 0;
        
//         if(dp[idx1][idx2] != -1) return dp[idx1][idx2];
//         int currLength = 0;
//         if(s1.charAt(idx1) == s2.charAt(idx2)){
//             currLength = 1 + helperDp(s1, s2, idx1 + 1, idx2 + 1, dp);
//         }
//         else currLength = 0;
        
//         return dp[idx1][idx2] = currLength;
        
//     }
// }




// class Solution {
//     public int longestCommonSubstr(String s1, String s2) {
//         int m = s1.length(), n = s2.length();
//         int maxLength = 0;
//         for(int i = 0; i < m; i++){
//             for(int j = 0; j < n; j++){
//                 maxLength = Math.max(maxLength, helperRec(s1, s2, i, j));
//             }
//         }
//         return maxLength;
//     }
//     public int helperRec(String s1, String s2, int idx1, int idx2){
//         if(idx1 == s1.length() || idx2 == s2.length()) return 0;
        
//         int currLength = 0;
//         if(s1.charAt(idx1) == s2.charAt(idx2)){
//             currLength = 1 + helperRec(s1, s2, idx1 + 1, idx2 + 1);
//         }
//         else currLength = 0;
        
//         return currLength;
        
//     }
// }
