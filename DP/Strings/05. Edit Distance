class Solution {
    public int minDistance(String word1, String word2) {
        int m = word1.length(), n = word2.length();
        int[][] dp = new int[m + 1][n + 1];
        for(int[] arr : dp) Arrays.fill(arr, -1);
        return helperDp(m - 1, n - 1, word1, word2, dp);
    }
    public int helperDp(int idx1, int idx2, String word1, String word2, int[][] dp){

        if(idx1 < 0) return idx2 + 1;
        if(idx2 < 0) return idx1 + 1;
        if(dp[idx1][idx2] != -1) return dp[idx1][idx2];

        if(word1.charAt(idx1) == word2.charAt(idx2)){
            return dp[idx1][idx2] = helperDp(idx1 - 1, idx2 - 1, word1, word2, dp);
        }
        else{
            return dp[idx1][idx2] = 1 + Math.min(
                helperDp(idx1, idx2 - 1, word1, word2, dp), // insert
                Math.min(
                    helperDp(idx1 - 1, idx2, word1, word2, dp), // delete
                    helperDp(idx1 - 1, idx2 - 1, word1, word2, dp) // replace
                )
            );
        }
    }
}




// class Solution {
//     public int minDistance(String word1, String word2) {
//         int m = word1.length();
//         int n = word2.length();

//         int[][] dp = new int[m + 1][n + 1];

//         // Initialize base cases
//         for (int i = 0; i <= m; i++) {
//             dp[i][0] = i; // delete all characters
//         }
//         for (int j = 0; j <= n; j++) {
//             dp[0][j] = j; // insert all characters
//         }

//         // Fill the DP table
//         for (int i = 1; i <= m; i++) {
//             for (int j = 1; j <= n; j++) {
//                 if (word1.charAt(i - 1) == word2.charAt(j - 1)) {
//                     dp[i][j] = dp[i - 1][j - 1]; // no operation
//                 } else {
//                     dp[i][j] = 1 + Math.min(
//                         dp[i - 1][j],     // delete
//                         Math.min(
//                             dp[i][j - 1], // insert
//                             dp[i - 1][j - 1] // replace
//                         )
//                     );
//                 }
//             }
//         }

//         return dp[m][n];
//     }
// }



// class Solution {
//     public int minDistance(String word1, String word2) {
//         int m = word1.length(), n = word2.length();
//         return helperRec(m - 1, n - 1, word1, word2);
//     }
//     public int helperRec(int idx1, int idx2, String word1, String word2){

//         if(idx1 < 0) return idx2 + 1;
//         if(idx2 < 0) return idx1 + 1;

//         if(word1.charAt(idx1) == word2.charAt(idx2)){
//             return helperRec(idx1 - 1, idx2 - 1, word1, word2);
//         }
//         else{
//             return 1 + Math.min(
//                 helperRec(idx1, idx2 - 1, word1, word2), // insert
//                 Math.min(
//                     helperRec(idx1 - 1, idx2, word1, word2), // delete
//                     helperRec(idx1 - 1, idx2 - 1, word1, word2) // replace
//                 )
//             );
//         }
//     }
// }
