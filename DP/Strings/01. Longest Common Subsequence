class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
        int m = text1.length() , n = text2.length();
        int[][] dp = new int[m + 1][n + 1];

        for(int i = m - 1; i >= 0; i--){
            for(int j = n - 1; j >= 0; j--){
                if(text1.charAt(i) == text2.charAt(j)){
                    dp[i][j] = 1 + dp[i+1][j+1];
                }
                else{
                    dp[i][j] = Math.max(dp[i+1][j], dp[i][j+1]);
                }
            }
        }
        return dp[0][0];
    }
}



// class Solution {
//     public int longestCommonSubsequence(String text1, String text2) {
//         int[][] dp = new int[text1.length()][text2.length()];
//         for(int[] arr : dp) Arrays.fill(arr, -1);
//         return helperDp(text1, text2, 0, 0, dp);
//     }
//     public int helperDp(String text1, String text2, int idx1, int idx2, int[][] dp){
//         if(idx1 == text1.length() || idx2 == text2.length()) return 0;
//         if(dp[idx1][idx2] != -1) return dp[idx1][idx2];
//         if(text1.charAt(idx1) == text2.charAt(idx2)){
//             return dp[idx1][idx2] = 1 + helperDp(text1, text2, idx1 + 1, idx2 + 1, dp);
//         }
//         else return dp[idx1][idx2] = Math.max(helperDp(text1, text2, idx1 + 1, idx2, dp), 
//                                             helperDp(text1, text2, idx1, idx2 + 1, dp));
//     }
// }


// class Solution {
//     public int longestCommonSubsequence(String text1, String text2) {
//         return helperRec(text1, text2, 0, 0);
//     }
//     public int helperRec(String text1, String text2, int idx1, int idx2){
//         if(idx1 == text1.length() || idx2 == text2.length()) return 0;

//         if(text1.charAt(idx1) == text2.charAt(idx2)){
//             return 1 + helperRec(text1, text2, idx1 + 1, idx2 + 1);
//         }
//         else return Math.max(helperRec(text1, text2, idx1 + 1, idx2), helperRec(text1, text2, idx1, idx2 + 1));
//     }
// }
