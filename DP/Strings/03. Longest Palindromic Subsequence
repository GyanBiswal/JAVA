class Solution {
    public int longestPalindromeSubseq(String s) {
        String s2 = new StringBuilder(s).reverse().toString();
        int m = s.length(), n = s2.length();
        int[][] dp = new int[m + 1][n + 1];

        for(int i = m - 1; i >= 0; i--){
            for(int j = n - 1; j >= 0; j--){
                if(s.charAt(i) == s2.charAt(j)){
                    dp[i][j] = 1 + dp[i + 1][j + 1];
                }
                else dp[i][j] = Math.max(dp[i + 1][j], dp[i][j + 1]);
            }
        }
        return dp[0][0];
    }
}



// class Solution {
//     public int longestPalindromeSubseq(String s) {
//          String s2 = new StringBuilder(s).reverse().toString();
//         int[][] dp = new int[s.length()][s2.length()];
//         for(int[] arr : dp) Arrays.fill(arr, -1);
//         return lscDp(s, s2, 0, 0, dp);
//     }
//     public int lscDp(String s1, String s2, int idx1, int idx2, int[][] dp){
//         if(idx1 == s1.length() || idx2 == s2.length()) return 0;
//         if(dp[idx1][idx2] != -1) return dp[idx1][idx2];
//         if(s1.charAt(idx1) == s2.charAt(idx2)){
//             return 1 + lscDp(s1, s2, idx1 + 1, idx2 + 1, dp);
//         }
//         else return dp[idx1][idx2] = Math.max(lscDp(s1, s2, idx1 + 1, idx2, dp), lscDp(s1, s2, idx1, idx2 + 1, dp));
//     }
// }


// class Solution {
//     public int longestPalindromeSubseq(String s) {
//         StringBuilder s2 = new StringBuilder(s);
//         s2 = s2.reverse();
//         return lscRec(s, s2.toString(), 0, 0);
//     }
//     public int lscRec(String s1, String s2, int idx1, int idx2){
//         if(idx1 == s1.length() || idx2 == s2.length()) return 0;
//         if(s1.charAt(idx1) == s2.charAt(idx2)){
//             return 1 + lscRec(s1, s2, idx1 + 1, idx2 + 1);
//         }
//         else return Math.max(lscRec(s1, s2, idx1 + 1, idx2), lscRec(s1, s2, idx1, idx2 + 1));
//     }
// }
