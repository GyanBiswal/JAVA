class Solution {
    public int maximalRectangle(char[][] matrix) {
        int m = matrix.length;
        int n = matrix[0].length;
        int[] heights = new int[n];
        int maxArea = 0;
        for(int i = 0; i < m; i++){
            for(int j = 0;j < n; j++){
                if(matrix[i][j] == '1') heights[j]++;
                else heights[j] = 0;
            }
            int currArea = largestRectangleArea(heights);
            maxArea = Math.max(maxArea, currArea);
        }
        return maxArea;
    }
    public int largestRectangleArea(int[] heights) {
        int n = heights.length;
        Stack<Integer> st = new Stack<>();
        int[] leftSmall = new int[n];
        int[] rightSmall = new int[n];

        for(int i = n - 1; i >= 0; i--){
            while(!st.isEmpty() && heights[st.peek()] >= heights[i]) st.pop();
            rightSmall[i] = st.isEmpty() ? n : st.peek();
            st.push(i);
        }

        st.clear();

        for(int i = 0; i < n; i++){
            while(!st.isEmpty() && heights[st.peek()] >= heights[i]) st.pop();
            leftSmall[i] = st.isEmpty() ? -1 : st.peek();
            st.push(i);
        }

        int maxArea = 0;
        for(int i = 0; i < n; i++){
            int currArea = heights[i] * (rightSmall[i] - leftSmall[i] - 1);
            maxArea = Math.max(maxArea, currArea);
        }
        return maxArea;
    }
}
