class Solution {
    public boolean canPartition(int[] nums) {
        int totalSum = 0;
        for(int num : nums) totalSum += num;
        Boolean[][] dp = new Boolean[nums.length][totalSum + 1];

        return totalSum % 2 != 0 ? false : helperDp(nums, 0, totalSum / 2, dp);
    }
    public boolean helperDp(int[] nums, int idx, int k, Boolean[][] dp){
        if(k == 0) return true;
        if(idx == nums.length) return false;
        
        if(dp[idx][k] != null) return dp[idx][k];

        boolean notTake = helperDp(nums, idx + 1, k, dp);
        boolean take = false;
        if(nums[idx] <= k)
        take = helperDp(nums, idx + 1, k - nums[idx], dp);

        return dp[idx][k] = take || notTake;
    }
}



// class Solution {
//     public boolean canPartition(int[] nums) {
//         int totalSum = 0;
//         for (int num : nums) totalSum += num;

//         // If total sum is odd, cannot partition
//         if (totalSum % 2 != 0) return false;

//         int target = totalSum / 2;
//         int n = nums.length;

//         boolean[][] dp = new boolean[n][target + 1];

//         // Base case: sum 0 is always possible
//         for (int i = 0; i < n; i++) {
//             dp[i][0] = true;
//         }

//         // First element can possibly make a subset
//         if (nums[0] <= target) {
//             dp[0][nums[0]] = true;
//         }

//         // Build the table
//         for (int i = 1; i < n; i++) {
//             for (int t = 1; t <= target; t++) {
//                 boolean notTake = dp[i - 1][t];
//                 boolean take = false;
//                 if (nums[i] <= t) {
//                     take = dp[i - 1][t - nums[i]];
//                 }
//                 dp[i][t] = take || notTake;
//             }
//         }

//         return dp[n - 1][target];
//     }
// }



// class Solution {
//     public boolean canPartition(int[] nums) {
//         int totalSum = 0;
//         for(int num : nums) totalSum += num;
//         return totalSum % 2 != 0 ? false : helperRec(nums, 0, totalSum / 2);
//     }
//     public boolean helperRec(int[] nums, int idx, int k){
//         if(k == 0) return true;
//         if(idx == nums.length) return false;

//         boolean notTake = helperRec(nums, idx + 1, k);
//         boolean take = false;
//         if(nums[idx] <= k)
//         take = helperRec(nums, idx + 1, k - nums[idx]);

//         return take || notTake;
//     }
// }
