class Solution {
    public int findCheapestPrice(int n, int[][] flights, int src, int dst, int k) {
        List<List<int[]>> adj = new ArrayList<>();
        for(int i = 0; i < n; i++){
            adj.add(new ArrayList<>());
        }

        for(int[] flight : flights){
            int u = flight[0], v = flight[1], w = flight[2];
            adj.get(u).add(new int[]{v, w});
        }

        int[] visited = new int[n];
        Arrays.fill(visited, Integer.MAX_VALUE);

        // PriorityQueue: {totalPriceSoFar, currentNode, stopsUsed}
        PriorityQueue<int[]> pq = new PriorityQueue<>(Comparator.comparingInt(a -> a[0]));
        pq.offer(new int[]{0, src, 0});

        while (!pq.isEmpty()) {
            int[] current = pq.poll();
            int cost = current[0], currCity = current[1], currStops = current[2];

            if (currCity == dst) return cost;

            if (currStops > k || currStops > visited[currCity]) continue;
            visited[currCity] = currStops;

            for (int[] neighbor : adj.get(currCity)) {
                int nextNode = neighbor[0];
                int priceToNext = neighbor[1];
                pq.offer(new int[]{cost + priceToNext, nextNode, currStops + 1});
            }
        }
        return -1;
    }
}
