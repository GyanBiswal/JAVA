class Solution {
    public int orangesRotting(int[][] grid) {
        int m = grid.length, n = grid[0].length;
        int[][] dirs = {{-1,0}, {1,0}, {0,-1}, {0,1}};
        int freshOranges = 0;
        int minutes = 0;
        Queue<int[]> q = new LinkedList<>();
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(grid[i][j] == 2) q.offer(new int[]{i,j});
                else if(grid[i][j] == 1) freshOranges++;
            }
        }
        while(!q.isEmpty()){
            int size = q.size();
            boolean rottedThisTime = false;
            for(int i = 0; i < size; i++){
                int[] curr = q.poll();
                int x = curr[0], y = curr[1];
                for(int[] dir : dirs){
                    int newX = x + dir[0];
                    int newY = y + dir[1];
                    if(newX >= 0 && newX < m && newY >= 0 && newY < n && grid[newX][newY] == 1){
                        grid[newX][newY] = 2;
                        q.offer(new int[]{newX, newY});
                        freshOranges--;
                        rottedThisTime = true;
                    }
                }
            }
            if(rottedThisTime) minutes++;
        }
        return freshOranges == 0 ? minutes : -1;
    }
}
