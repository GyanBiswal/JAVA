/*
class Node{
    int data;
    Node left;
    Node right;
    Node(int data){
        this.data = data;
        left=null;
        right=null;
    }
}
*/

class Solution {
    // Function to return a list of nodes visible from the top view
    // from left to right in Binary Tree.
    static class Pair{
        Node Node;
        int hd;
        Pair(Node Node, int hd){
            this.Node = Node;
            this.hd = hd;
        }
    }
    static ArrayList<Integer> topView(Node root) {
        ArrayList<Integer> ans = new ArrayList<>();
        if(root == null) return ans;
        TreeMap<Integer, Integer> map = new TreeMap<>();
        Queue<Pair> q = new LinkedList<>();
        q.offer(new Pair(root, 0));
        
        while(!q.isEmpty()){
            Pair curr = q.poll();
            Node currNode = curr.Node;
            int currHd = curr.hd;
            
            if(!map.containsKey(currHd)){
                map.put(currHd, currNode.data);
            }
            
            if(currNode.left != null) q.offer(new Pair(currNode.left, currHd - 1));
            if(currNode.right != null) q.offer(new Pair(currNode.right, currHd + 1));
        }
        
        for(int col : map.values()) ans.add(col);
        return ans;
    }
}
