/*
class Node
{
    int data;
    Node left, right;

    public Node(int d)
    {
        data = d;
        left = right = null;
    }
}
*/

class Solution {
    static class Pair{
        Node Node;
        int hd;
        Pair(Node Node, int hd){
            this.Node = Node;
            this.hd = hd;
        }
    }
    static ArrayList<ArrayList<Integer>> verticalOrder(Node root) {
        ArrayList<ArrayList<Integer>> ans = new ArrayList<>();
        if(root == null) return ans;

        TreeMap<Integer, ArrayList<Integer>> map = new TreeMap<>();
        Queue<Pair> q = new LinkedList<>();
        q.offer(new Pair(root, 0));

        while(!q.isEmpty()){
            Pair curr = q.poll();
            Node currNode = curr.Node;
            int currHd = curr.hd;

            map.putIfAbsent(currHd, new ArrayList<>());
            map.get(currHd).add(currNode.data);

            if(currNode.left != null) q.offer(new Pair(currNode.left, currHd - 1));
            if(currNode.right != null) q.offer(new Pair(currNode.right, currHd + 1));
        }

        for(ArrayList<Integer> col : map.values()) ans.add(col);

        return ans;
    }
}
